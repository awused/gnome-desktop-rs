// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// DO NOT EDIT

use glib::object::IsA;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;

#[cfg(any(feature = "gio_v2_22", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "gio_v2_22")))]
glib::wrapper! {
    ///
    ///
    /// # Implements
    ///
    /// [`IdleMonitorExt`][trait@crate::prelude::IdleMonitorExt], [`trait@gio::prelude::InitableExt`]
    #[doc(alias = "GnomeIdleMonitor")]
    pub struct IdleMonitor(Object<ffi::GnomeIdleMonitor, ffi::GnomeIdleMonitorClass>) @implements gio::Initable;

    match fn {
        type_ => || ffi::gnome_idle_monitor_get_type(),
    }
}

#[cfg(not(any(feature = "gio_v2_22", feature = "dox")))]
glib::wrapper! {
    #[doc(alias = "GnomeIdleMonitor")]
    pub struct IdleMonitor(Object<ffi::GnomeIdleMonitor, ffi::GnomeIdleMonitorClass>);

    match fn {
        type_ => || ffi::gnome_idle_monitor_get_type(),
    }
}

impl IdleMonitor {
    pub const NONE: Option<&'static IdleMonitor> = None;

    ///
    /// # Returns
    ///
    /// a new #GnomeIdleMonitor that tracks the server-global
    /// idletime for all devices.
    #[doc(alias = "gnome_idle_monitor_new")]
    pub fn new() -> IdleMonitor {
        assert_initialized_main_thread!();
        unsafe { from_glib_full(ffi::gnome_idle_monitor_new()) }
    }
}

impl Default for IdleMonitor {
    fn default() -> Self {
        Self::new()
    }
}

/// Trait containing all [`struct@IdleMonitor`] methods.
///
/// # Implementors
///
/// [`IdleMonitor`][struct@crate::IdleMonitor]
pub trait IdleMonitorExt: 'static {
    /// ## `interval_msec`
    /// The idletime interval, in milliseconds. It must be
    ///     a strictly positive value (> 0).
    /// ## `callback`
    /// The callback to call when the user has
    ///     accumulated @interval_msec milliseconds of idle time.
    /// ## `notify`
    /// A #GDestroyNotify
    ///
    /// # Returns
    ///
    /// a watch id
    ///
    /// Adds a watch for a specific idle time. The callback will be called
    /// when the user has accumulated @interval_msec milliseconds of idle time.
    /// This function will return an ID that can either be passed to
    /// gnome_idle_monitor_remove_watch(), or can be used to tell idle time
    /// watches apart if you have more than one.
    ///
    /// Also note that this function will only care about positive transitions
    /// (user's idle time exceeding a certain time). If you want to know about
    /// when the user has become active, use
    /// gnome_idle_monitor_add_user_active_watch().
    #[doc(alias = "gnome_idle_monitor_add_idle_watch")]
    fn add_idle_watch(
        &self,
        interval_msec: u64,
        callback: Option<Box_<dyn Fn(&IdleMonitor, u32) + 'static>>,
    ) -> u32;

    /// ## `callback`
    /// The callback to call when the user is
    ///     active again.
    /// ## `notify`
    /// A #GDestroyNotify
    ///
    /// # Returns
    ///
    /// a watch id
    ///
    /// Add a one-time watch to know when the user is active again.
    /// Note that this watch is one-time and will de-activate after the
    /// function is called, for efficiency purposes. It's most convenient
    /// to call this when an idle watch, as added by
    /// gnome_idle_monitor_add_idle_watch(), has triggered.
    #[doc(alias = "gnome_idle_monitor_add_user_active_watch")]
    fn add_user_active_watch(
        &self,
        callback: Option<Box_<dyn Fn(&IdleMonitor, u32) + 'static>>,
    ) -> u32;

    ///
    /// # Returns
    ///
    /// The current idle time, in milliseconds
    #[doc(alias = "gnome_idle_monitor_get_idletime")]
    #[doc(alias = "get_idletime")]
    fn idletime(&self) -> u64;

    /// Removes an idle time watcher, previously added by
    /// gnome_idle_monitor_add_idle_watch() or
    /// gnome_idle_monitor_add_user_active_watch().
    /// ## `id`
    /// A watch ID
    #[doc(alias = "gnome_idle_monitor_remove_watch")]
    fn remove_watch(&self, id: u32);
}

impl<O: IsA<IdleMonitor>> IdleMonitorExt for O {
    fn add_idle_watch(
        &self,
        interval_msec: u64,
        callback: Option<Box_<dyn Fn(&IdleMonitor, u32) + 'static>>,
    ) -> u32 {
        let callback_data: Box_<Option<Box_<dyn Fn(&IdleMonitor, u32) + 'static>>> =
            Box_::new(callback);
        unsafe extern "C" fn callback_func(
            monitor: *mut ffi::GnomeIdleMonitor,
            id: libc::c_uint,
            user_data: glib::ffi::gpointer,
        ) {
            let monitor = from_glib_borrow(monitor);
            let callback: &Option<Box_<dyn Fn(&IdleMonitor, u32) + 'static>> =
                &*(user_data as *mut _);
            if let Some(ref callback) = *callback {
                callback(&monitor, id)
            } else {
                panic!("cannot get closure...")
            };
        }
        let callback = if callback_data.is_some() {
            Some(callback_func as _)
        } else {
            None
        };
        unsafe extern "C" fn notify_func(data: glib::ffi::gpointer) {
            let _callback: Box_<Option<Box_<dyn Fn(&IdleMonitor, u32) + 'static>>> =
                Box_::from_raw(data as *mut _);
        }
        let destroy_call4 = Some(notify_func as _);
        let super_callback0: Box_<Option<Box_<dyn Fn(&IdleMonitor, u32) + 'static>>> =
            callback_data;
        unsafe {
            ffi::gnome_idle_monitor_add_idle_watch(
                self.as_ref().to_glib_none().0,
                interval_msec,
                callback,
                Box_::into_raw(super_callback0) as *mut _,
                destroy_call4,
            )
        }
    }

    fn add_user_active_watch(
        &self,
        callback: Option<Box_<dyn Fn(&IdleMonitor, u32) + 'static>>,
    ) -> u32 {
        let callback_data: Box_<Option<Box_<dyn Fn(&IdleMonitor, u32) + 'static>>> =
            Box_::new(callback);
        unsafe extern "C" fn callback_func(
            monitor: *mut ffi::GnomeIdleMonitor,
            id: libc::c_uint,
            user_data: glib::ffi::gpointer,
        ) {
            let monitor = from_glib_borrow(monitor);
            let callback: &Option<Box_<dyn Fn(&IdleMonitor, u32) + 'static>> =
                &*(user_data as *mut _);
            if let Some(ref callback) = *callback {
                callback(&monitor, id)
            } else {
                panic!("cannot get closure...")
            };
        }
        let callback = if callback_data.is_some() {
            Some(callback_func as _)
        } else {
            None
        };
        unsafe extern "C" fn notify_func(data: glib::ffi::gpointer) {
            let _callback: Box_<Option<Box_<dyn Fn(&IdleMonitor, u32) + 'static>>> =
                Box_::from_raw(data as *mut _);
        }
        let destroy_call3 = Some(notify_func as _);
        let super_callback0: Box_<Option<Box_<dyn Fn(&IdleMonitor, u32) + 'static>>> =
            callback_data;
        unsafe {
            ffi::gnome_idle_monitor_add_user_active_watch(
                self.as_ref().to_glib_none().0,
                callback,
                Box_::into_raw(super_callback0) as *mut _,
                destroy_call3,
            )
        }
    }

    fn idletime(&self) -> u64 {
        unsafe { ffi::gnome_idle_monitor_get_idletime(self.as_ref().to_glib_none().0) }
    }

    fn remove_watch(&self, id: u32) {
        unsafe {
            ffi::gnome_idle_monitor_remove_watch(self.as_ref().to_glib_none().0, id);
        }
    }
}

impl fmt::Display for IdleMonitor {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("IdleMonitor")
    }
}
